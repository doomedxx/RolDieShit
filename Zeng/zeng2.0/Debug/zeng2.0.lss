
zeng2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000458  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800106  00800106  000004f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc0  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087d  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000708  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  00002560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000465  00000000  00000000  00002ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  9e:	0c 94 2a 02 	jmp	0x454	; 0x454 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
	ADCSRA |= (1 << ADSC);

	while (ADCSRA & (1 << ADSC));

	return ADC;
}
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e6 e0       	ldi	r30, 0x06	; 6
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	82 2f       	mov	r24, r18
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ea 5f       	subi	r30, 0xFA	; 250
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
 104:	16 82       	std	Z+6, r1	; 0x06
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ea 5f       	subi	r30, 0xFA	; 250
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
 12a:	16 82       	std	Z+6, r1	; 0x06
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c6 e0       	ldi	r28, 0x06	; 6
 13c:	d1 e0       	ldi	r29, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 14e:	09 95       	icall
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
 178:	cf 93       	push	r28
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <__vector_11>:
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
 1be:	e6 e0       	ldi	r30, 0x06	; 6
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	29 e2       	ldi	r18, 0x29	; 41
 1c4:	31 e0       	ldi	r19, 0x01	; 1
 1c6:	80 81       	ld	r24, Z
 1c8:	91 81       	ldd	r25, Z+1	; 0x01
 1ca:	89 2b       	or	r24, r25
 1cc:	91 f0       	breq	.+36     	; 0x1f2 <__vector_11+0x4e>
 1ce:	82 81       	ldd	r24, Z+2	; 0x02
 1d0:	93 81       	ldd	r25, Z+3	; 0x03
 1d2:	00 97       	sbiw	r24, 0x00	; 0
 1d4:	59 f4       	brne	.+22     	; 0x1ec <__vector_11+0x48>
 1d6:	86 81       	ldd	r24, Z+6	; 0x06
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	86 83       	std	Z+6, r24	; 0x06
 1dc:	84 81       	ldd	r24, Z+4	; 0x04
 1de:	95 81       	ldd	r25, Z+5	; 0x05
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	39 f0       	breq	.+14     	; 0x1f2 <__vector_11+0x4e>
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	93 83       	std	Z+3, r25	; 0x03
 1e8:	82 83       	std	Z+2, r24	; 0x02
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <__vector_11+0x4e>
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	93 83       	std	Z+3, r25	; 0x03
 1f0:	82 83       	std	Z+2, r24	; 0x02
 1f2:	37 96       	adiw	r30, 0x07	; 7
 1f4:	e2 17       	cp	r30, r18
 1f6:	f3 07       	cpc	r31, r19
 1f8:	31 f7       	brne	.-52     	; 0x1c6 <__vector_11+0x22>
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <uart_init>:
#define UBBRVAL 51

// initiate Arduino for transmitting over serial
void uart_init(){
	//set the baud rate
	UBRR0H = 0;
 214:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBBRVAL;
 218:	83 e3       	ldi	r24, 0x33	; 51
 21a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	//disable U2X mode
	UCSR0A  = 0;
 21e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	//enable transmitter
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
 222:	88 e1       	ldi	r24, 0x18	; 24
 224:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	//set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C  = _BV(UCSZ01)|_BV(UCSZ00);
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 22e:	08 95       	ret

00000230 <init_adc>:

// initiate analog sensor(temp)
void init_adc(){
	// ref= Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC0 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 236:	87 e8       	ldi	r24, 0x87	; 135
 238:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 23c:	08 95       	ret

0000023e <port_init>:
}

// init ports for the LED's
void port_init(void){
	DDRB |= _BV(DDB5);   //rode led
 23e:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= _BV(DDB4);   //gele led
 240:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= _BV(DDB3);   //groene led
 242:	23 9a       	sbi	0x04, 3	; 4
 244:	08 95       	ret

00000246 <readtemp>:
// declare temperature object
Temperature temperature;

// read out the temp from sensor (nog steeds gekke waardes.)
Temperature readtemp(void){
	ADMUX &= ~_BV(MUX0); // Set channel point to port 0
 246:	ec e7       	ldi	r30, 0x7C	; 124
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	8e 7f       	andi	r24, 0xFE	; 254
 24e:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC); // Start adc measurement
 250:	ea e7       	ldi	r30, 0x7A	; 122
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 64       	ori	r24, 0x40	; 64
 258:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC); // proceed when done
 25a:	80 81       	ld	r24, Z
 25c:	86 fd       	sbrc	r24, 6
 25e:	fd cf       	rjmp	.-6      	; 0x25a <readtemp+0x14>
	float celsius = ((ADCW * 5000 / 1024) - 500) / 10;
 260:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 264:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	temperature.value = (int)celsius;
 268:	88 e8       	ldi	r24, 0x88	; 136
 26a:	93 e1       	ldi	r25, 0x13	; 19
 26c:	48 9f       	mul	r20, r24
 26e:	90 01       	movw	r18, r0
 270:	49 9f       	mul	r20, r25
 272:	30 0d       	add	r19, r0
 274:	58 9f       	mul	r21, r24
 276:	30 0d       	add	r19, r0
 278:	11 24       	eor	r1, r1
 27a:	23 2f       	mov	r18, r19
 27c:	33 27       	eor	r19, r19
 27e:	26 95       	lsr	r18
 280:	26 95       	lsr	r18
 282:	24 5f       	subi	r18, 0xF4	; 244
 284:	31 40       	sbci	r19, 0x01	; 1
 286:	ad ec       	ldi	r26, 0xCD	; 205
 288:	bc ec       	ldi	r27, 0xCC	; 204
 28a:	0e 94 1b 02 	call	0x436	; 0x436 <__umulhisi3>
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	96 95       	lsr	r25
 294:	87 95       	ror	r24
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <temperature+0x1>
 29e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <temperature>
	return temperature;
}
 2a2:	08 95       	ret

000002a4 <OpenScreen>:
int maxDistance = 10;
int minDistance = 1;

void OpenScreen(uint16_t maxDistance)
{
		PORTB |= _BV(PORTB5);			// rode led gaan aan
 2a4:	2d 9a       	sbi	0x05, 5	; 5
		if(distance < maxDistance){
 2a6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance>
 2aa:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance+0x1>
 2ae:	28 17       	cp	r18, r24
 2b0:	39 07       	cpc	r19, r25
 2b2:	10 f5       	brcc	.+68     	; 0x2f8 <OpenScreen+0x54>
			PORTB |= _BV(PB3);           //gele led knippert bij normaal licht
 2b4:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	33 ec       	ldi	r19, 0xC3	; 195
 2ba:	49 e0       	ldi	r20, 0x09	; 9
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	30 40       	sbci	r19, 0x00	; 0
 2c0:	40 40       	sbci	r20, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <OpenScreen+0x18>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <OpenScreen+0x22>
 2c6:	00 00       	nop
			_delay_ms(BLINK_DELAY_MS);
			PORTB &= ~_BV(PB3);
 2c8:	2b 98       	cbi	0x05, 3	; 5
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	33 ec       	ldi	r19, 0xC3	; 195
 2ce:	49 e0       	ldi	r20, 0x09	; 9
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	30 40       	sbci	r19, 0x00	; 0
 2d4:	40 40       	sbci	r20, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <OpenScreen+0x2c>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <OpenScreen+0x36>
 2da:	00 00       	nop
			_delay_ms(BLINK_DELAY_MS);
			distance = distance +1;
 2dc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance>
 2e0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance+0x1>
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance+0x1>
 2ec:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance>
			if (distance == maxDistance){
 2f0:	82 17       	cp	r24, r18
 2f2:	93 07       	cpc	r25, r19
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <OpenScreen+0x54>
				PORTB &= ~_BV(PORTB5);
 2f6:	2d 98       	cbi	0x05, 5	; 5
 2f8:	08 95       	ret

000002fa <closeScreen>:
}
//Sluit het rolluit aan de hand van 

void closeScreen(uint16_t minDistance)
{
		PORTB |= _BV(PORTB4);			// groene led gaan aan
 2fa:	2c 9a       	sbi	0x05, 4	; 5
		if(distance <= maxDistance){
 2fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <distance>
 300:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <distance+0x1>
 304:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <maxDistance>
 308:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <maxDistance+0x1>
 30c:	24 17       	cp	r18, r20
 30e:	35 07       	cpc	r19, r21
 310:	14 f1       	brlt	.+68     	; 0x356 <closeScreen+0x5c>
			PORTB |= _BV(PB3);           //gele led knippert bij normaal licht
 312:	2b 9a       	sbi	0x05, 3	; 5
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	33 ec       	ldi	r19, 0xC3	; 195
 318:	49 e0       	ldi	r20, 0x09	; 9
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	30 40       	sbci	r19, 0x00	; 0
 31e:	40 40       	sbci	r20, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <closeScreen+0x20>
 322:	00 c0       	rjmp	.+0      	; 0x324 <closeScreen+0x2a>
 324:	00 00       	nop
			_delay_ms(BLINK_DELAY_MS);
			PORTB &= ~_BV(PB3);
 326:	2b 98       	cbi	0x05, 3	; 5
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	33 ec       	ldi	r19, 0xC3	; 195
 32c:	49 e0       	ldi	r20, 0x09	; 9
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	30 40       	sbci	r19, 0x00	; 0
 332:	40 40       	sbci	r20, 0x00	; 0
 334:	e1 f7       	brne	.-8      	; 0x32e <closeScreen+0x34>
 336:	00 c0       	rjmp	.+0      	; 0x338 <closeScreen+0x3e>
 338:	00 00       	nop
			_delay_ms(BLINK_DELAY_MS);
			distance = distance -1;
 33a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <distance>
 33e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <distance+0x1>
 342:	21 50       	subi	r18, 0x01	; 1
 344:	31 09       	sbc	r19, r1
 346:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance+0x1>
 34a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance>
			if (distance == minDistance){
 34e:	28 17       	cp	r18, r24
 350:	39 07       	cpc	r19, r25
 352:	09 f4       	brne	.+2      	; 0x356 <closeScreen+0x5c>
				PORTB &= ~_BV(PORTB4);
 354:	2c 98       	cbi	0x05, 4	; 5
 356:	08 95       	ret

00000358 <rollOut>:
			}
		}
}

void rollOut(void){
	OpenScreen(maxDistance);
 358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <maxDistance>
 35c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <maxDistance+0x1>
 360:	0e 94 52 01 	call	0x2a4	; 0x2a4 <OpenScreen>
 364:	08 95       	ret

00000366 <rollIn>:
}

void rollIn(void){
	closeScreen(minDistance);
 366:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 36a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 36e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <closeScreen>
 372:	08 95       	ret

00000374 <executeCommand>:
void getCommand(){
	command = receive(); 
}

void executeCommand(){
	if(command ==0x1){
 374:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <command>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	29 f4       	brne	.+10     	; 0x386 <executeCommand+0x12>
		rollOut();
 37c:	0e 94 ac 01 	call	0x358	; 0x358 <rollOut>
		command = 0x00;		
 380:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <command>
 384:	08 95       	ret
	}
	else if(command == 0x2){
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	21 f4       	brne	.+8      	; 0x392 <executeCommand+0x1e>
		rollIn();
 38a:	0e 94 b3 01 	call	0x366	; 0x366 <rollIn>
		command = 0x00;	
 38e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <command>
 392:	08 95       	ret

00000394 <receive>:
#include <stdio.h>
uint8_t command;


uint8_t receive(){
	loop_until_bit_is_set(UCSR0A, RXC0);
 394:	e0 ec       	ldi	r30, 0xC0	; 192
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	88 23       	and	r24, r24
 39c:	ec f7       	brge	.-6      	; 0x398 <receive+0x4>
	return UDR0;
 39e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 3a2:	08 95       	ret

000003a4 <getCommand>:

void getCommand(){
	command = receive(); 
 3a4:	0e 94 ca 01 	call	0x394	; 0x394 <receive>
 3a8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <command>
 3ac:	08 95       	ret

000003ae <transmit>:
int roll_to;
//int distance = 0;

void transmit(uint8_t data){
	//UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set
 3ae:	e0 ec       	ldi	r30, 0xC0	; 192
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	90 81       	ld	r25, Z
 3b4:	95 ff       	sbrs	r25, 5
 3b6:	fd cf       	rjmp	.-6      	; 0x3b2 <transmit+0x4>
	(UCSR0A , UDRE0);
	//send the data
	UDR0 = data;
 3b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3bc:	08 95       	ret

000003be <transmitTemp>:

// transmit the temp to python in 2 bytes
void transmitTemp(Temperature temperature){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	d8 2f       	mov	r29, r24
 3c4:	c9 2f       	mov	r28, r25
	transmit((uint8_t)2);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 d7 01 	call	0x3ae	; 0x3ae <transmit>
	transmit(temperature.bytes[0]);
 3ce:	8d 2f       	mov	r24, r29
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <transmit>
	transmit(temperature.bytes[1]);
 3d6:	8c 2f       	mov	r24, r28
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <transmit>
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <sendTemperature>:

// send the actual temp to the transmit function
void sendTemperature(void){
	Temperature temperature = readtemp();
 3e4:	0e 94 23 01 	call	0x246	; 0x246 <readtemp>
	transmitTemp(temperature);
 3e8:	0e 94 df 01 	call	0x3be	; 0x3be <transmitTemp>
 3ec:	08 95       	ret

000003ee <main>:
}

int main(void){
	init_adc();
 3ee:	0e 94 18 01 	call	0x230	; 0x230 <init_adc>
	uart_init();
 3f2:	0e 94 0a 01 	call	0x214	; 0x214 <uart_init>
	port_init();
 3f6:	0e 94 1f 01 	call	0x23e	; 0x23e <port_init>
	SCH_Init_T1();
 3fa:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
NOTE: ONLY THE SCHEDULER INTERRUPT SHOULD BE ENABLED!!!
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
	sei();
 3fe:	78 94       	sei
	//start scheduler 
	SCH_Start();
	//add tasks to schedular(max 5) 100ms timer voor testen, hoort 4000 te worden.
	//SCH_Add_Task(getTemp, 0, 100 );
	SCH_Add_Task(getCommand, 0, 100);
 400:	44 e6       	ldi	r20, 0x64	; 100
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	82 ed       	ldi	r24, 0xD2	; 210
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(executeCommand, 0,  100);
 410:	44 e6       	ldi	r20, 0x64	; 100
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	8a eb       	ldi	r24, 0xBA	; 186
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(sendTemperature, 0, 100);
 420:	44 e6       	ldi	r20, 0x64	; 100
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	82 ef       	ldi	r24, 0xF2	; 242
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	while(1){
		//keep dispatching tasks while running.
		SCH_Dispatch_Tasks();
 430:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 434:	fd cf       	rjmp	.-6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>

00000436 <__umulhisi3>:
 436:	a2 9f       	mul	r26, r18
 438:	b0 01       	movw	r22, r0
 43a:	b3 9f       	mul	r27, r19
 43c:	c0 01       	movw	r24, r0
 43e:	a3 9f       	mul	r26, r19
 440:	70 0d       	add	r23, r0
 442:	81 1d       	adc	r24, r1
 444:	11 24       	eor	r1, r1
 446:	91 1d       	adc	r25, r1
 448:	b2 9f       	mul	r27, r18
 44a:	70 0d       	add	r23, r0
 44c:	81 1d       	adc	r24, r1
 44e:	11 24       	eor	r1, r1
 450:	91 1d       	adc	r25, r1
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
